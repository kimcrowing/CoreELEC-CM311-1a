// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif

COMPAT_VARYING     vec2 VARomega;
COMPAT_VARYING     vec4 VARc21_22;
COMPAT_VARYING     vec4 VARc12_20;
COMPAT_VARYING     vec2 VARc11;
COMPAT_VARYING     vec4 VARc02_10;
COMPAT_VARYING     vec4 VARc00_01;

struct tex_coords {
    vec4 VARc00_01;
    vec4 VARc02_10;
    vec2 VARc11;
    vec4 VARc12_20;
    vec4 VARc21_22;
};

struct sine_factor {
    vec2 VARomega;
};

struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _oPosition1;
sine_factor _sine1;
tex_coords _coords1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0016;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_VARYING vec4 COL0;
COMPAT_ATTRIBUTE vec4 TexCoord;

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i != 4; i++)
               for (int j = 0; j != 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }

uniform COMPAT_PRECISION int FrameDirection;
uniform COMPAT_PRECISION int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;

void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);

    vec4 _oColor;
    vec2 _delta;
    sine_factor _TMP5;
    vec2 _TMP6;
    vec2 _TMP7;
    vec2 _TMP8;
    vec2 _TMP9;
    vec2 _TMP10;
    vec2 _TMP11;
    vec2 _TMP12;
    vec2 _TMP13;
    tex_coords _TMP14;

    _r0016.x = dot(MVPMatrix_[0], VertexCoord);
    _r0016.y = dot(MVPMatrix_[1], VertexCoord);
    _r0016.z = dot(MVPMatrix_[2], VertexCoord);
    _r0016.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0016;
    _oColor = COLOR;
    _delta = 5.00000000E-001/TextureSize;
    _TMP12 = TexCoord.xy + vec2(-_delta.x, -_delta.y);
    _TMP13 = TexCoord.xy + vec2(-_delta.x, 0.00000000E+000);
    _TMP14.VARc00_01 = vec4(_TMP12.x, _TMP12.y, _TMP13.x, _TMP13.y);
    _TMP10 = TexCoord.xy + vec2(-_delta.x, _delta.y);
    _TMP11 = TexCoord.xy + vec2(0.00000000E+000, -_delta.y);
    _TMP14.VARc02_10 = vec4(_TMP10.x, _TMP10.y, _TMP11.x, _TMP11.y);
    _TMP8 = TexCoord.xy + vec2(0.00000000E+000, _delta.y);
    _TMP9 = TexCoord.xy + vec2(_delta.x, -_delta.y);
    _TMP14.VARc12_20 = vec4(_TMP8.x, _TMP8.y, _TMP9.x, _TMP9.y);
    _TMP6 = TexCoord.xy + vec2(_delta.x, 0.00000000E+000);
    _TMP7 = TexCoord.xy + vec2(_delta.x, _delta.y);
    _TMP14.VARc21_22 = vec4(_TMP6.x, _TMP6.y, _TMP7.x, _TMP7.y);
    VARc00_01 = _TMP14.VARc00_01;
    VARc02_10 = _TMP14.VARc02_10;
    VARc11 = TexCoord.xy;
    VARc12_20 = _TMP14.VARc12_20;
    VARc21_22 = _TMP14.VARc21_22;
    _TMP5.VARomega = vec2((3.14150000E+000*OutputSize.x*TextureSize.x)/InputSize.x, 6.28299999E+000*TextureSize.y);
    VARomega = _TMP5.VARomega;
    gl_Position = _r0016;
    COL0 = COLOR;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif

COMPAT_VARYING     vec2 VARomega;
COMPAT_VARYING     vec4 VARc21_22;
COMPAT_VARYING     vec4 VARc12_20;
COMPAT_VARYING     vec2 VARc11;
COMPAT_VARYING     vec4 VARc02_10;
COMPAT_VARYING     vec4 VARc00_01;

struct tex_coords {
    vec4 VARc00_01;
    vec4 VARc02_10;
    vec2 VARc11;
    vec4 VARc12_20;
    vec4 VARc21_22;
};

struct sine_factor {
    vec2 VARomega;
};

struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _ret_0;
vec3 _TMP22;
vec3 _TMP21;
float _TMP17;
vec2 _TMP16;
float _TMP20;
float _TMP19;
vec3 _TMP15;
vec3 _TMP14;
float _TMP13;
float _TMP12;
float _TMP11;
float _TMP10;
float _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
tex_coords _co1;
sine_factor _factor1;
input_dummy _IN1;
uniform sampler2D Texture;
float _x0050;
float _x0054;
float _x0058;
float _x0062;
float _x0066;
vec3 _a0072;
vec2 _x0074;
vec2 _a0080;
vec3 _diff0082;
vec3 _TMP83;
vec3 _x0090;
vec3 _TMP91;

uniform COMPAT_PRECISION int FrameDirection;
uniform COMPAT_PRECISION int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;

void main()
{
    vec3 _first;
    vec3 _second;
    vec3 _mid_horiz;
    vec3 _mid_vert;
    vec3 _res;
    vec3 _final;
    vec3 _scanline;

    _TMP0 = COMPAT_TEXTURE(Texture, VARc00_01.xy);
    _TMP1 = COMPAT_TEXTURE(Texture, VARc00_01.zw);
    _TMP2 = COMPAT_TEXTURE(Texture, VARc02_10.xy);
    _TMP3 = COMPAT_TEXTURE(Texture, VARc02_10.zw);
    _TMP5 = COMPAT_TEXTURE(Texture, VARc12_20.xy);
    _TMP6 = COMPAT_TEXTURE(Texture, VARc12_20.zw);
    _TMP7 = COMPAT_TEXTURE(Texture, VARc21_22.xy);
    _TMP8 = COMPAT_TEXTURE(Texture, VARc21_22.zw);
    _x0050 = VARc11.x*TextureSize.x + 5.00000000E-001;
    _TMP9 = fract(_x0050);
    _first = _TMP0.xyz + _TMP9*(_TMP6.xyz - _TMP0.xyz);
    _x0054 = VARc11.x*TextureSize.x + 5.00000000E-001;
    _TMP10 = fract(_x0054);
    _second = _TMP2.xyz + _TMP10*(_TMP8.xyz - _TMP2.xyz);
    _x0058 = VARc11.x*TextureSize.x + 5.00000000E-001;
    _TMP11 = fract(_x0058);
    _mid_horiz = _TMP1.xyz + _TMP11*(_TMP7.xyz - _TMP1.xyz);
    _x0062 = VARc11.y*TextureSize.y + 5.00000000E-001;
    _TMP12 = fract(_x0062);
    _mid_vert = _TMP3.xyz + _TMP12*(_TMP5.xyz - _TMP3.xyz);
    _x0066 = VARc11.y*TextureSize.y + 5.00000000E-001;
    _TMP13 = fract(_x0066);
    _res = _first + _TMP13*(_second - _first);
    _TMP14 = _mid_horiz + 5.00000000E-001*(_mid_vert - _mid_horiz);
    _a0072 = _res - _TMP14;
    _TMP15 = abs(_a0072);
    _final = 2.59999990E-001*(_res + _mid_horiz + _mid_vert) + 3.50000000E+000*_TMP15;
    _x0074 = VARc11*VARomega;
    _TMP19 = sin(_x0074.x);
    _TMP20 = sin(_x0074.y);
    _TMP16 = vec2(_TMP19, _TMP20);
    _a0080 = vec2( 5.00000007E-002, 1.50000006E-001)*_TMP16;
    _TMP17 = dot(_a0080, vec2( 1.00000000E+000, 1.00000000E+000));
    _scanline = _final*(9.49999988E-001 + _TMP17);
    _diff0082 = _scanline - vec3( 8.00000012E-001, 8.00000012E-001, 8.00000012E-001);
    _TMP21 = min(vec3( 1.00000000E+002, 1.00000000E+002, 1.00000000E+002), _diff0082);
    _TMP83 = max(vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000), _TMP21);
    _x0090 = _scanline - _TMP83*8.00000012E-001;
    _TMP22 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _x0090);
    _TMP91 = max(vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000), _TMP22);
    _ret_0 = vec4(_TMP91.x, _TMP91.y, _TMP91.z, 1.00000000E+000);
    FragColor = _ret_0;
    return;
} 
#endif
